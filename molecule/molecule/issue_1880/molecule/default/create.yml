---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: false
  tasks:
    - name: "Get Docker hosts targeted"
      set_fact:
        # random if host not forced to let default value
        molecule_docker_hosts: |
          {{
            molecule_docker_hosts | d( [] )
            | symmetric_difference( [ (item.docker_host | d( molecule_scenario_directory | to_uuid) ) ] )
          }}
      with_items: molecule_yml.platforms

    - name: "Log into Docker registries on each targeted hosts"
      docker_login:
      args: |
        {{
          ( molecule_yml.driver.hosts[item.0] | d({}, true) )
          | combine( item.1, recursive=true )
        }}
      with_nested:
        - "{{ molecule_docker_hosts }}"
        - "{{ molecule_yml.driver.registries | d([], true) }}"
      when:
        - item.1.registry_url is defined
        - item.1.username is defined

    - name: "Create Dockerfiles from image names"
      template:
        src: "{{ item.dockerfile | default('Dockerfile.j2') }}"
        dest: "{{ molecule_ephemeral_directory }}/Dockerfile_{{ item.name | regex_replace('[^a-zA-Z0-9_]', '_') }}"
      with_items: "{{ molecule_yml.driver.images | d([], true) }}"

    - name: "Generation of uuid tags for images"
      set_fact:
        docker_images_tag: |
          {{
            docker_images_tag | d({})
            | combine({
              item.name : {
                "tag":  (
                          lookup('file', molecule_ephemeral_directory + '/Dockerfile_' + (item.name | regex_replace('[^a-zA-Z0-9_]', '_')))
                          + (item | string)
                        ) | to_uuid
              }
            })
          }}
      with_items: "{{ molecule_yml.driver.images | d([], true) }}"

    - name: "Build an Ansible compatible image on targeted hosts"
      docker_image:
      args: |
        {{
          ( __docker_hosts[ (item.0.docker_host | d('-1')) ] | d({}) )
          | combine( item.1, recursive=true )
          | combine( docker_images_tag[item.1.name] | d({}) )
          | combine({
              "path": molecule_ephemeral_directory,
              "dockerfile": molecule_ephemeral_directory + '/Dockerfile_' + (item.1.name | regex_replace('[^a-zA-Z0-9_]', '_')),
              "name": 'molecule_local/' + item.1.name
            }, recursive=true)
        }}
      vars:
        __docker_hosts: "{{ molecule_yml.driver.hosts | d([]) }}"
      with_nested:
        - "{{ molecule_yml.platforms | d([], true) }}"
        - "{{ molecule_yml.driver.images | d([], true) }}"
      when:
        - item.1.name is defined
        - item.0.image == (item.1.name | d('', true) )

    - name: "Create docker network(s) on targeted hosts"
      docker_network:
      args: |
        {{
          ( __docker_hosts[ (item.0.docker_host | d('-1')) ] | d({}) )
          | combine( item.1, recursive=true )
          | combine({
              "state": 'present',
            }, recursive=true)
        }}
      vars:
        __docker_hosts: "{{ molecule_yml.driver.hosts | d([]) }}"
      with_nested:
        - "{{ molecule_yml.platforms | d([], true) }}"
        - "{{ molecule_yml.driver.networks | d([], true) }}"
      when:
        - item.1.name is defined
        - item.0.networks | d([]) | selectattr('name', 'equalto', (item.1.name | d('', true)) ) | list | length > 0

    - name: "Determine the CMD directives"
      set_fact:
        command_directives_dict: >-
          {{ command_directives_dict | default({}) |
             combine({ item.name: item.command | default('bash -c "while true; do sleep 10000; done"') })
          }}
      with_items: "{{ molecule_yml.platforms }}"

    - name: Create molecule instance(s)
      docker_container:
      args: |
          {{
            ( __docker_hosts[ (item.docker_host | d('-1')) ] | d({}) )
            | combine( item, recursive=true )
            | combine({
                "image": ( __docker_image_tag | ternary( 'molecule_local/' + item.image + ':' + __docker_image_tag.tag | d(''), item.image )),
                "command": (command_directives_dict | default({}))[item.name] | default(omit),
                "hostname": item.hostname | default(item.name),
                "state": 'started',
                "recreate": false,
                "log_driver": 'json-file'
              }, recursive=true)
          }}
      vars:
        __docker_images_tag: "{{ docker_images_tag | d({}) }}"
        __docker_image_tag: "{{ __docker_images_tag[item.image] | d({}) }}"
        __docker_hosts: "{{ molecule_yml.driver.hosts | d([]) }}"
      register: server
      with_items:
        - "{{ molecule_yml.platforms }}"
      async: 7200
      poll: 0

    - name: Wait for instance(s) creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: docker_jobs
      until: docker_jobs.finished
      retries: 300
      with_items: "{{ server.results }}"
